{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 /*\
//\
// Created by Brahim Hamid oudjana on 2022-09-17.\
//\
\
#include "Player.h"\
#include <vector>\
\
Player::Player(OrderList *orderList, Hand *hand, vector<Territory> *territories) \{\
    this->orderList = orderList;\
    this->territories2 = territories;\
    this->hand = hand;\
\}\
\
//Copy constructor\
Player::Player(const Player *player) \{\
    this->orderList = player->getOrders();\
    this->territories2 = player->getTerritories();\
    this->hand = player->getHand();\
\}\
\
//Destructor\
Player::~Player() \{\
    this->territories2 = NULL;\
    this->orderList = NULL;\
    this->hand = NULL;\
\};\
\
\
//Getters:\
OrderList *Player::getOrders() const \{\
    return orderList;\
\}\
\
Hand *Player::getHand() const \{\
    return hand;\
\}\
/*\
const vector<Territory *> Player::getTerritories() const \{\
    return territories;\
\}*/\
/*\
const vector<Territory>* Player::getTerritories() const \{\
    return territories2;\
\}\
\
//Setters:\
void Player::setOrders(OrderList *orders) \{\
    Player::orderList = orders;\
\}\
\
void Player::setHand(Hand *hand) \{\
    Player::hand = hand;\
\}\
\
/*void Player::setTerritories(const vector<Territory *> &territories) \{\
    territories = territories;\
\}*/\
/*\
void Player::setTerritories( vector<Territory>* territories) \{\
    territories2 = territories;\
\}\
\
void Player::issueOrder() \{\
    // Add order params\
    //construct an Order object\
    //append the object to the ordersList\
    Order* order = new Order();\
    this->orderList.Append(order);\
\}\
vector<Territory >* Player::toDefend() \{\
    vector<Territory*> ToDefendTerritories;\
    int LIMIT = (this->territories2).size();\
    for (size_t i = 0; i < LIMIT; i++) \{\
        ToDefendTerritories.push_back(this->territories2[i]);\
        i++;\
    \}\
    return ToDefendTerritories;\
\};\
\
vector<Territory *> Player::toAttack() \{\
    //return arbitrary territories for now\
    //Must access Territories not in the possession of the player\
\}*/\
\
\
\
\
\
\
\
\
\
\
\
}